name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1  # Région AWS (à ajuster selon vos besoins)
  ECR_REPOSITORY: churn-prediction  # Nom du repository ECR
  IMAGE_TAG: ${{ github.sha }}
  EB_APPLICATION_NAME: churn-prediction  # Nom de votre application Elastic Beanstalk
  EB_ENVIRONMENT_NAME: churn-prediction-demo  # Nom de votre environnement Elastic Beanstalk

permissions:
  contents: read

jobs:
  train-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        uv sync --frozen
    
    - name: Train model
      run: uv run train.py
    
    - name: Run tests
      run: uv run pytest

  build-and-push:
    needs: train-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-push
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Generate Dockerrun.aws.json
      run: |
        echo '{
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "${{ steps.build-push.outputs.image }}",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": 8000,
              "HostPort": 8000
            }
          ]
        }' > Dockerrun.aws.json

    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: ${{ env.EB_APPLICATION_NAME }}
        environment_name: ${{ env.EB_ENVIRONMENT_NAME }}
        region: ${{ env.AWS_REGION }}
        deployment_package: Dockerrun.aws.json
        wait_for_deployment: true
  